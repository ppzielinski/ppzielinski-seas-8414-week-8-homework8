import streamlit as st
import pandas as pd
from pycaret.classification import load_model, predict_model
from genai_prescriptions import generate_prescription
import os
import time

st.set_page_config(page_title="GenAI-Powered Phishing SOAR", layout="wide")

@st.cache_resource
def load_assets():
    model = load_model('models/phishing_url_detector') if os.path.exists('models/phishing_url_detector.pkl') else None
    plot = 'models/feature_importance.png' if os.path.exists('models/feature_importance.png') else None
    return model, plot
model, feature_plot = load_assets()

if not model:
    st.error("Model not found. Check container logs (make logs)."); st.stop()

with st.sidebar:
    st.title("URL Feature Input")
    form_values = {'url_length': st.select_slider("URL Length", ['Short', 'Normal', 'Long'], 'Long'), 'ssl_state': st.select_slider("SSL Status", ['Trusted', 'Suspicious', 'None'], 'Suspicious'), 'sub_domain': st.select_slider("Sub-domain", ['None', 'One', 'Many'], 'One'), 'prefix_suffix': st.checkbox("Has Prefix/Suffix", True), 'has_ip': st.checkbox("Uses IP Address", False), 'short_service': st.checkbox("Is Shortened", False), 'at_symbol': st.checkbox("Has '@'", False), 'abnormal_url': st.checkbox("Is Abnormal", True)}
    st.divider()
    genai_provider = st.selectbox("Select GenAI Provider", ["Gemini", "OpenAI", "Grok"])
    submitted = st.button("Analyze & Respond", use_container_width=True, type="primary")

st.title("GenAI-Powered SOAR for Phishing URL Analysis")

if not submitted:
    st.info("Provide URL features in the sidebar and click 'Analyze' to begin.")
    if feature_plot:
        st.subheader("Model Feature Importance"); st.image(feature_plot, caption="Which features the model weighs most heavily.")
else:
    input_dict = {'having_IP_Address': 1 if form_values['has_ip'] else -1, 'URL_Length': -1 if form_values['url_length'] == 'Short' else (0 if form_values['url_length'] == 'Normal' else 1), 'Shortining_Service': 1 if form_values['short_service'] else -1, 'having_At_Symbol': 1 if form_values['at_symbol'] else -1, 'double_slash_redirecting': -1, 'Prefix_Suffix': 1 if form_values['prefix_suffix'] else -1, 'having_Sub_Domain': -1 if form_values['sub_domain'] == 'None' else (0 if form_values['sub_domain'] == 'One' else 1), 'SSLfinal_State': -1 if form_values['ssl_state'] == 'None' else (0 if form_values['ssl_state'] == 'Suspicious' else 1), 'Abnormal_URL': 1 if form_values['abnormal_url'] else -1, 'URL_of_Anchor': 0, 'Links_in_tags': 0, 'SFH': 0}
    input_data = pd.DataFrame([input_dict])
    risk_scores = {"Bad SSL": 25 if input_dict['SSLfinal_State'] < 1 else 0, "Abnormal URL": 20 if input_dict['Abnormal_URL'] == 1 else 0, "Prefix/Suffix": 15 if input_dict['Prefix_Suffix'] == 1 else 0, "Shortened URL": 15 if input_dict['Shortining_Service'] == 1 else 0, "Complex Sub-domain": 10 if input_dict['having_Sub_Domain'] == 1 else 0, "Long URL": 10 if input_dict['URL_Length'] == 1 else 0, "Uses IP Address": 5 if input_dict['having_IP_Address'] == 1 else 0}
    risk_df = pd.DataFrame(list(risk_scores.items()), columns=['Feature', 'Risk Contribution']).sort_values('Risk Contribution', ascending=False)

    with st.status("Executing SOAR playbook...", expanded=True) as status:
        st.write("Step 1: Predictive Analysis..."); time.sleep(1); prediction = predict_model(model, data=input_data); is_malicious = prediction['prediction_label'].iloc[0] == 1
        st.write(f"Step 2: Verdict is {'MALICIOUS' if is_malicious else 'BENIGN'}."); time.sleep(1)
        if is_malicious:
            st.write(f"Step 3: Engaging {genai_provider} for prescription..."); prescription = generate_prescription(genai_provider, input_dict); status.update(label="Playbook Executed!", state="complete", expanded=False)
        else:
            prescription = None; status.update(label="Benign. Analysis Complete.", state="complete", expanded=False)

    tab1, tab2, tab3 = st.tabs(["Analysis Summary", "Visual Insights", "Prescriptive Plan"])
    with tab1:
        st.subheader("Verdict and Key Findings")
        if is_malicious: st.error("**Prediction: Malicious Phishing URL**")
        else: st.success("**Prediction: Benign URL**")
        st.metric("Malicious Confidence Score", f"{prediction['prediction_score'].iloc[0]:.2%}" if is_malicious else f"{1-prediction['prediction_score'].iloc[0]:.2%}")
    with tab2:
        st.subheader("Visual Analysis"); st.write("#### Risk Contribution by Feature"); st.bar_chart(risk_df.set_index('Feature'))
        if feature_plot: st.write("#### Model Feature Importance (Global)"); st.image(feature_plot)
    with tab3:
        st.subheader("Actionable Response Plan");
        if prescription:
            st.success("A prescriptive response plan has been generated by the AI.")
            st.write("#### Recommended Actions")
            actions = prescription.get("recommended_actions", [])
            if actions:
                for i, action in enumerate(actions, 1):
                    if isinstance(action, dict):
                        st.markdown(f"**{i}. {action.get('action', 'N/A')}:** {action.get('details', 'N/A')}")
                    else:
                        st.markdown(f"**{i}.** {action}")
            st.write("#### Communication Draft"); st.text_area("Draft", prescription.get("communication_draft", ""), height=150)
        else: st.info("URL was benign. No plan needed.")